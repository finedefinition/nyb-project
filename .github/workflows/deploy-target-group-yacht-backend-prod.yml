name: Build & Deploy to Target Group YACHT-BACKEND-PRODUCTION

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: 440744214482
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  TARGET_GROUP_ARN: ${{ vars[format('TARGET_GROUP_ARN_{0}', github.ref_name)] }}
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::440744214482:role/github-actions-yacht-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}-latest
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::440744214482:role/github-actions-yacht-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up utility functions
        run: |
          echo "Setting up utility functions"
          cat <<- 'EOF' > /tmp/utils.sh
          #!/bin/bash
          run_command() {
            local command="$1"
            local instance="$2"
            echo "Running command: $command on instance: $instance"
            command_id=$(aws ssm send-command \
              --instance-ids "$instance" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": ["'"$command"'"]}' \
              --query "Command.CommandId" \
              --output text)
            echo "Command ID: $command_id"
            aws ssm wait command-executed \
              --command-id "$command_id" \
              --instance-id "$instance"
            echo "Command executed successfully"
          }
          export -f run_command
          EOF
          chmod +x /tmp/utils.sh

      - name: Get EC2 instances in Target Group
        id: get_instances
        run: |
          echo "Fetching instances from target group"
          instances=$(aws elbv2 describe-target-health --target-group-arn ${{ env.TARGET_GROUP_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text)
          echo "Instances found: $instances"
          echo "instances=$instances" >> $GITHUB_OUTPUT

      - name: Pull the latest Docker image
        run: |
          source /tmp/utils.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}-latest" "$instance"
          done

      - name: Stop running containers
        run: |
          source /tmp/utils.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "cd /home/ec2-user/app && docker-compose down" "$instance"
          done

      - name: Start containers
        run: |
          source /tmp/utils.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "cd /home/ec2-user/app && docker-compose up -d" "$instance"
          done

      - name: Remove unused Docker images
        run: |
          source /tmp/utils.sh
          instances="${{ steps.get_instances.outputs.instances }}"
          for instance in $instances; do
            run_command "docker image prune -f" "$instance"
          done
